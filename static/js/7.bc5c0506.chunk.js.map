{"version":3,"sources":["components/Profile/ProfileEdit/ProfileEdit.tsx","redux/Profile/profile-select.ts","components/Profile/ProfileEdit/ProfileEditContainer.tsx"],"names":["ProfileEdit","props","validationSchema","yup","shape","fullName","required","aboutMe","lookingForAJobDescription","contacts","object","obj","Object","keys","profilePage","forEach","item","url","contactsValidation","EditorWrapper","Header","isSaveProfile","SaveProfileSuccess","Forms","initialValues","onSubmit","values","saveProfile","errors","touched","handleChange","handleBlur","isValid","dirty","FormsItem","Label","Input","onChange","onBlur","type","name","Error","component","entries","map","i","console","log","ButtonWrapper","Button","disabled","styled","div","section","label","Field","ErrorMessage","button","selectProfile","state","profile","selectIsSaveProfile","selectPosts","posts","connect"],"mappings":"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","file":"static/js/7.bc5c0506.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components/macro\";\r\nimport {ErrorMessage, Field, Form, Formik} from 'formik';\r\nimport {ProfileType} from \"../../../Types/Types\";\r\nimport * as yup from 'yup'\r\nimport { object } from 'yup';\r\n\r\n\r\n\r\n\r\ntype ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\ntype Props = {\r\n    profilePage: ProfileType | null\r\n    saveProfile: (profile: ProfileType) => void\r\n    isSaveProfile: boolean\r\n}\r\n\r\nconst ProfileEdit: React.FC<Props> = (props) => {\r\n\r\n    const contactsValidation = () => {\r\n        const obj = {} as any\r\n        Object.keys(props.profilePage?.contacts as ContactsType).forEach(item => {\r\n           obj[item] = yup.string().url('Введите валидный url пример: https://example.com')\r\n        })\r\n        return obj\r\n    }\r\n\r\n    const validationSchema = yup.object().shape({\r\n        fullName: yup.string().required('Обязательно'),\r\n        aboutMe: yup.string().required('Обязательно'),\r\n        lookingForAJobDescription: yup.string().required('Обязательно'),\r\n        contacts: object().shape(contactsValidation())\r\n\r\n    })\r\n\r\n    const submit = (values: any) => {\r\n        props.saveProfile(values)\r\n    }\r\n\r\n\r\n    return (\r\n        <EditorWrapper>\r\n            <Header>Основное</Header>\r\n            {props.isSaveProfile && <SaveProfileSuccess>Профиль обновлен</SaveProfileSuccess>}\r\n            <Forms>\r\n                <Formik validationSchema={validationSchema} initialValues={props.profilePage as ProfileType} onSubmit={submit}>\r\n                    {({values,errors,touched,handleChange,handleBlur,isValid,dirty}) => (\r\n                        <Form>\r\n                            <FormsItem>\r\n                                <Label>Имя: </Label>\r\n                                <Input onChange={handleChange} onBlur={handleBlur} type='name' name=\"fullName\"/>\r\n                                <Error name=\"fullName\" component=\"div\"/>\r\n                            </FormsItem>\r\n                            <FormsItem>\r\n                                <Label>Обо мне: </Label>\r\n                                <Input type=\"text\" name=\"aboutMe\"/>\r\n                                <Error name=\"aboutMe\" component=\"div\"/>\r\n                            </FormsItem>\r\n                            <FormsItem>\r\n                                <Label>В поисках работы: </Label>\r\n                                <Input type=\"checkbox\" name=\"lookingForAJob\"/>\r\n                                <Error name=\"lookingForAJob\" component=\"div\"/>\r\n                            </FormsItem>\r\n                            <FormsItem>\r\n                                <Label>Skills: </Label>\r\n                                <Input type=\"text\" name=\"lookingForAJobDescription\"/>\r\n                                <Error name=\"lookingForAJobDescription\" component=\"div\"/>\r\n                            </FormsItem>\r\n                            {Object.entries(props.profilePage?.contacts as ContactsType).map((i ) => {\r\n                                    return (\r\n                                            <FormsItem>\r\n                                                <Label>{`${i[0]}`}</Label>\r\n                                                <Input  type='text' name={`contacts.${i[0]}`}/>\r\n                                                <Error name={`contacts.${i[0]}`} component=\"div\"/>\r\n                                            </FormsItem>\r\n                                    )\r\n\r\n                                })\r\n                            }\r\n                            {console.log(!isValid,!dirty)}\r\n                            <ButtonWrapper>\r\n                                <Button disabled={!dirty || !isValid} type=\"submit\">Сохранить</Button>\r\n                            </ButtonWrapper>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Forms>\r\n        </EditorWrapper>\r\n    );\r\n};\r\n\r\nexport default ProfileEdit;\r\n\r\n\r\nconst EditorWrapper = styled.div`\r\n    background-color: white;\r\n    border-radius: 4px 4px 0 0;\r\n`\r\n\r\nconst Header = styled.div`\r\n    padding: 0 20px;\r\n    border-bottom: 1px solid #e7e8ec;\r\n    display: block;\r\n    height: 54px;\r\n    line-height: 54px;\r\n    font-size: 16px;\r\n    outline: 0;\r\n    color: black;\r\n`\r\n\r\nconst SaveProfileSuccess = styled.div`\r\n  background-color: greenyellow;\r\n  color: black;\r\n  padding: 15px 0;\r\n`\r\n\r\nconst Forms = styled.section`\r\n  padding: 30px 10px;\r\n`\r\n\r\nconst FormsItem = styled.div`\r\n  margin-bottom: 15px;\r\n  display: grid;\r\n  grid-template-columns: [labels] 30% [controls] 1fr;\r\n  column-gap: 10px;\r\n  align-items: center;\r\n \r\n`\r\nconst Label = styled.label`\r\n  color: #656565;\r\n  justify-self: end;\r\n  grid-column: labels;\r\n`\r\n\r\nconst Input = styled(Field)`\r\n  background-color: #ffffff;\r\n  border-radius: 3px;\r\n  border: 1px solid #d3d9de;\r\n  color: black;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  max-width: 300px;\r\n  height: 25px;\r\n  grid-column: controls;\r\n`\r\n\r\nconst Error = styled(ErrorMessage)`\r\n  color: red;\r\n  grid-column: controls;\r\n  margin-top: 5px;\r\n`\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 30px;\r\n`\r\n\r\nexport const Button = styled.button`\r\n    padding: 7px 16px 8px;\r\n    margin: 0;\r\n    cursor: pointer;\r\n    text-align: center;\r\n    background-color: #5181b8;\r\n    border: 0;\r\n    border-radius: 4px;\r\n    color: #fff;\r\n    &:hover {\r\n    opacity: 0.88;\r\n    }\r\n    &:active {\r\n    background-color: #4a76a8;\r\n    padding-top: 8px;\r\n    padding-bottom: 7px;\r\n    }\r\n    &:disabled{\r\n    opacity: 0.5;\r\n    }\r\n`\r\n","import {AppStateType} from \"../redux-store\";\r\n\r\nexport const selectProfile = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n\r\n}\r\n\r\nexport const selectIsSaveProfile = (state: AppStateType) => {\r\n    return state.profilePage.isSaveProfile\r\n\r\n}\r\n\r\nexport const selectPosts = (state: AppStateType) => {\r\n    return state.profilePage.posts\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {selectIsSaveProfile, selectProfile} from \"../../../redux/Profile/profile-select\";\r\nimport {ProfileType} from \"../../../Types/Types\";\r\nimport {saveProfile} from \"../../../redux/Profile/profile-actions\";\r\nimport ProfileEdit from \"./ProfileEdit\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    isSaveProfile: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    saveProfile: (values: object) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\n\r\nconst ProfileEditContainer: React.FC<PropsType> = ({profile,saveProfile,isSaveProfile})=> {\r\n\r\n    return (\r\n        <ProfileEdit profilePage={profile} saveProfile={saveProfile} isSaveProfile={isSaveProfile}/>\r\n    );\r\n};\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: selectProfile(state),\r\n        isSaveProfile: selectIsSaveProfile(state)\r\n    }\r\n}\r\n\r\n export default connect<MapStatePropsType,MapDispatchPropsType,{},AppStateType>(MapStateToProps,{saveProfile})(ProfileEditContainer);\r\n\r\n"],"sourceRoot":""}